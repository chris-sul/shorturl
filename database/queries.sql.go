// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: queries.sql

package database

import (
	"context"
)

const createLink = `-- name: CreateLink :one
insert into links (url_code, destination) values ($1, $2) returning id, url_code, destination
`

type CreateLinkParams struct {
	UrlCode     string
	Destination string
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, createLink, arg.UrlCode, arg.Destination)
	var i Link
	err := row.Scan(&i.ID, &i.UrlCode, &i.Destination)
	return i, err
}

const deleteLink = `-- name: DeleteLink :one
delete from links where id = $1 returning id, url_code, destination
`

func (q *Queries) DeleteLink(ctx context.Context, id int32) (Link, error) {
	row := q.db.QueryRowContext(ctx, deleteLink, id)
	var i Link
	err := row.Scan(&i.ID, &i.UrlCode, &i.Destination)
	return i, err
}

const findLinkDestinationByCode = `-- name: FindLinkDestinationByCode :one
select links.destination from links where links.url_code = $1
`

func (q *Queries) FindLinkDestinationByCode(ctx context.Context, urlCode string) (string, error) {
	row := q.db.QueryRowContext(ctx, findLinkDestinationByCode, urlCode)
	var destination string
	err := row.Scan(&destination)
	return destination, err
}

const getLinks = `-- name: GetLinks :many
select id, url_code, destination from links
`

func (q *Queries) GetLinks(ctx context.Context) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, getLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(&i.ID, &i.UrlCode, &i.Destination); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
